name: build-deploy

on:
  workflow_dispatch:
  schedule:
    - cron: "12 * * * *"
  push:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-deploy:
    runs-on: ubuntu-24.04
    env:
      USE_PLAYWRIGHT: "1"
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps & Playwright (Chromium)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install --with-deps chromium

      - name: Ensure src is a package
        run: |
          test -f src/__init__.py || printf "" > src/__init__.py

      - name: Prepare site dirs
        run: |
          rm -rf state northwoods.ics
          mkdir -p public public/state public/ics
          printf "" > public/.nojekyll

      - name: Helper scripts (extract + verify)
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/extract_sources.py << 'PY'
          import sys, os, yaml
          SRC_FILE_CANDIDATES = ["sources.yml","sources.yaml"]
          OUT_PATH = ".tmp.sources.yaml"
          src_file = next((c for c in SRC_FILE_CANDIDATES if os.path.isfile(c)), None)
          if not src_file:
              print("ERROR: sources.yml not found at repo root.", file=sys.stderr)
              with open(OUT_PATH, "w", encoding="utf-8") as w:
                  yaml.safe_dump({"sources":[]}, w, sort_keys=False)
              sys.exit(1)
          raw = yaml.safe_load(open(src_file, "r", encoding="utf-8")) or {}
          clean=[]
          for s in raw.get("sources", []):
              if not isinstance(s, dict): continue
              if s.get("enabled") is False: continue
              name=s.get("name"); kind=s.get("kind"); url=s.get("url"); tz=s.get("tzname")
              if not name or not kind or not url: continue
              clean.append({"name":name,"kind":kind,"url":url,"tzname":tz})
          if not clean:
              print("ERROR: no valid sources found in sources.yml.", file=sys.stderr)
              sys.exit(1)
          yaml.safe_dump({"sources":clean}, open(OUT_PATH,"w",encoding="utf-8"), sort_keys=False)
          print(f"Wrote {len(clean)} sources to {OUT_PATH}")
          PY

          cat > .github/scripts/verify_freshness.py << 'PY'
          import json, os
          P="state/last_run_report.json"
          if not os.path.isfile(P):
              raise SystemExit("ERROR: state/last_run_report.json not found.")
          d=json.load(open(P,"r",encoding="utf-8"))
          print("Report time (UTC):", d.get("when"))
          print("Freshness OK.")
          PY

      - name: Extract sources
        run: python .github/scripts/extract_sources.py

      - name: Run scraper
        run: python -m src.main < .tmp.sources.yaml

      - name: Verify state
        run: python .github/scripts/verify_freshness.py

      - name: Copy state/site artifacts
        run: |
          cp -f state/last_run_report.json public/state/last_run_report.json
          cp -f state/events.json public/state/events.json  || printf "[]" > public/state/events.json
          test -f northwoods.ics && cp -f northwoods.ics public/ics/northwoods.ics || true

      - name: Minimal index + diag
        run: |
          cat > public/index.html << 'HTML'
          <!doctype html>
          <html lang="en"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Northwoods Events</title>
          <style>
          body{font-family:system-ui,Arial,sans-serif;margin:20px}
          table{border-collapse:collapse;width:100%} th,td{border:1px solid #ddd;padding:8px}
          th{background:#f6f6f6;text-align:left}
          .badge{display:inline-block;padding:2px 6px;border:1px solid #ccc;border-radius:12px;margin-left:8px;font-size:.8em}
          #status{margin:10px 0;padding:8px;border:1px solid #ddd;background:#fafafa}
          </style></head><body>
          <h1>Northwoods Events <span id="count" class="badge">0</span></h1>
          <div id="status">Loading…</div>
          <label>Filter by source: <select id="source"></select></label>
          <table id="tbl"><thead><tr><th>When</th><th>Title</th><th>Location</th><th>Source</th></tr></thead><tbody></tbody></table>
          <script>
          const statusBox=document.getElementById("status");
          const sel=document.getElementById("source"); const tbody=document.querySelector("#tbl tbody"); const badge=document.getElementById("count");
          const fmt=(s)=>s?new Date(s).toLocaleString():"";
          let all=[];
          function render(){
            const src=sel.value;
            const rows=(src==="__all__"?all:all.filter(e=>e.source===src));
            badge.textContent=rows.length; tbody.innerHTML="";
            rows.forEach(e=>{
              const tr=document.createElement("tr");
              tr.innerHTML=`<td>${fmt(e.start)}</td><td>${e.title||""}</td><td>${e.location||""}</td><td>${e.source||""}</td>`;
              tbody.appendChild(tr);
            });
          }
          function setSources(){
            const u=[...new Set(all.map(e=>e.source).filter(Boolean))].sort();
            sel.innerHTML="<option value=__all__>All</option>"+u.map(s=>`<option>${s}</option>`).join("");
            sel.onchange=render;
          }
          fetch("state/events.json",{cache:"no-store"})
            .then(r=>{statusBox.textContent=`GET state/events.json → ${r.status}`; if(!r.ok) throw new Error(r.status); return r.json();})
            .then(j=>{all=Array.isArray(j)?j:(j.events||[]); setSources(); render();})
            .catch(e=>{statusBox.textContent=`Failed to load events.json: ${e}`;});
          </script></body></html>
          HTML

          cat > public/diag.html << 'HTML'
          <!doctype html><meta charset="utf-8"><title>Diag</title>
          <pre id="out">Loading…</pre>
          <script>
          const out=document.getElementById("out");
          Promise.all([
            fetch("state/last_run_report.json",{cache:"no-store"}).then(r=>r.ok?r.json():({error:`status ${r.status}`})),
            fetch("state/events.json",{cache:"no-store"}).then(r=>r.ok?r.json():({error:`status ${r.status}`}))
          ]).then(([a,b])=>{
            out.textContent=JSON.stringify({
              last_run_report:a,
              events_preview:Array.isArray(b)?b.slice(0,3):(b.events||[]).slice(0,3)
            },null,2)
          }).catch(e=>{out.textContent=String(e)});
          </script>
          HTML

      - name: Commit state to repo (optional)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A state public/state public/ics public/index.html public/diag.html public/.nojekyll || true
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "ci: update state and site $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push origin HEAD:${GITHUB_REF_NAME}
          else
            echo "No changes to commit"
          fi

      - name: Configure Pages
        uses: actions/configure-pages@v5
        with:
          enablement: false

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public
          name: github-pages
          retention-days: 1

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
