name: Build ICS & Deploy Pages

on:
  schedule:
    - cron: "15 9 * * *"   # daily at 09:15 UTC
  workflow_dispatch:

permissions:
  contents: write   # commit/push changes (state/, northwoods.ics)
  pages: write      # deploy to Pages
  id-token: write   # required by deploy-pages

concurrency:
  group: pages
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  build:
    name: Build ICS & prepare site
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Show working dir (pre)
        shell: bash
        run: |
          echo "===== BUILD START $(date -u +%FT%TZ) ====="
          echo "CWD: $(pwd)"
          python3 --version || true
          echo "-------------------------------------------"
          ls -la
          echo "-------------------------------------------"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests beautifulsoup4 lxml ics python-dateutil pytz pyyaml
          fi

      - name: Show sources file(s) found
        shell: bash
        run: |
          set -euo pipefail
          echo "Looking for sources.{yaml,yml} at repo root and in src/..."
          found=0
          for p in sources.yaml sources.yml src/sources.yaml src/sources.yml; do
            if [ -f "$p" ]; then
              echo " - found: $p"
              found=1
            fi
          done
          if [ $found -eq 0 ]; then
            echo "::warning::No sources.yaml/yml found at repo root or in src/. main.py will error if none is present."
          fi

      - name: Run builder (src/main.py)
        shell: bash
        env:
          TZ: America/Chicago
        run: |
          set -euo pipefail
          echo "Running: python src/main.py"
          python src/main.py || exit_code=$?
          # Always try to dump a report if main wrote it
          for p in last_run_report.json state/last_run_report.json; do
            if [ -f "$p" ]; then
              echo "== $p =="
              sed -n '1,120p' "$p" || true
            fi
          done
          # Re-throw prior failure (if any)
          if [ -n "${exit_code:-}" ]; then
            exit "$exit_code"
          fi

      - name: List outputs & state tree
        shell: bash
        run: |
          set -euo pipefail
          echo "----- Repo root after build -----"
          ls -la
          echo
          echo "----- If state/ exists, show top of tree -----"
          if [ -d state ]; then
            find state -maxdepth 2 -type f | sed -n '1,200p'
          else
            echo "(no state/ dir)"
          fi
          echo
          echo "----- If snapshots exist, list first 40 -----"
          if [ -d state/snapshots ]; then
            find state/snapshots -maxdepth 1 -type f | sed -n '1,40p'
          else
            echo "(no state/snapshots dir)"
          fi
          echo
          if [ -f northwoods.ics ]; then
            echo "ICS at repo root: northwoods.ics (bytes): $(wc -c < northwoods.ics)"
          elif [ -f src/northwoods.ics ]; then
            echo "ICS in src/: src/northwoods.ics (bytes): $(wc -c < src/northwoods.ics)"
            cp src/northwoods.ics ./northwoods.ics
          else
            echo "::warning::No ICS file produced."
          fi

      - name: Commit & push changes (if any)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "Daily update: ICS + state"
          git push

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build public site (no heredocs)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf public
          mkdir -p public
          printf '%s\n' \
            '<!doctype html>' \
            '<meta charset="utf-8">' \
            '<title>Northwoods Events - Artifacts</title>' \
            '<h1>Northwoods Events - Artifacts</h1>' \
            '<p>This page lists useful generated files from the repo.</p>' \
            '<ul>' \
            '  <li><a href="state/">state/ (snapshots, last_run_report.json)</a></li>' \
            '  <li><a href="northwoods.ics">northwoods.ics (if present)</a></li>' \
            '</ul>' \
            '<hr>' \
            '<p>Auto-published by GitHub Pages workflow.</p>' \
            > public/index.html

          if [ -d state ]; then
            mkdir -p public/state
            cp -a state/. public/state/
            python - <<'PY'
import os, html
root = "public/state"
for base, dirs, files in os.walk(root):
    rel = os.path.relpath(base, root)
    if rel == ".": rel = ""
    with open(os.path.join(base, "index.html"), "w", encoding="utf-8") as f:
        f.write("<!doctype html><meta charset='utf-8'>")
        f.write("<title>state/{}</title>".format(html.escape(rel)))
        f.write("<h1>state/{}</h1><ul>".format(html.escape(rel)))
        for d in sorted(dirs):
            d_esc = html.escape(d)
            f.write("<li>[dir] <a href='{0}/'>{0}/</a></li>".format(d_esc))
        for fn in sorted(files):
            if fn == "index.html": continue
            fn_esc = html.escape(fn)
            f.write("<li><a href='{0}'>{0}</a></li>".format(fn_esc))
        f.write("</ul>")
PY
          fi

          if [ -f northwoods.ics ]; then
            cp northwoods.ics public/
          fi

          echo "Public artifact contents (top):"
          find public -maxdepth 3 -type f | sed -n '1,200p'

      - name: Upload artifact (github-pages)
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
