name: Build & Deploy Pages

on:
  workflow_run:
    workflows: ["Scrape & Parse Events"]
    types: [completed]
  workflow_dispatch:

# Avoid overlapping deployments
concurrency:
  group: "pages"
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # OPTIONAL: pull artifacts from the triggering run, if your scrape job uploaded any
      - name: Download artifacts from scrape run (if present)
        if: ${{ github.event_name == 'workflow_run' }}
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event.workflow_run.id }}
          path: downloaded
          if_no_artifact_found: ignore

      # OPTIONAL: Python only needed if you want to generate an index.html via a tiny script
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build static site
        run: |
          set -euo pipefail
          mkdir -p public/state

          # Prefer an artifact copy of last_run_report.json if one exists
          ART_JSON="$(find downloaded -name last_run_report.json -print -quit || true)"
          if [ -n "${ART_JSON:-}" ]; then
            echo "Found artifact: ${ART_JSON}"
            cp "${ART_JSON}" public/state/last_run_report.json
          elif [ -f state/last_run_report.json ]; then
            echo "Found repo file: state/last_run_report.json"
            cp state/last_run_report.json public/state/last_run_report.json
          else
            echo "No last_run_report.json found. Proceeding with a minimal site."
          fi

          # Generate a minimal index.html (so the folder isn't empty)
          python - <<'PY'
import json, os, datetime, glob
os.makedirs("public", exist_ok=True)
dt = datetime.datetime.utcnow().isoformat()+"Z"
report_path = "public/state/last_run_report.json"
meta = {}
counts = []
if os.path.isfile(report_path):
    try:
        data = json.load(open(report_path, "r", encoding="utf-8"))
        meta = data.get("meta", {})
        for s in data.get("sources", []):
            counts.append({
                "name": s.get("name",""),
                "parsed": s.get("parsed", 0),
                "added": s.get("added", 0),
                "parser_kind": s.get("parser_kind","")
            })
    except Exception as e:
        meta = {"error": str(e)}

rows = "\n".join(
    f"<tr><td>{c['name']}</td><td>{c['parser_kind']}</td><td>{c['parsed']}</td><td>{c['added']}</td></tr>"
    for c in counts[:50]  # show top 50
)

html = f"""<!doctype html>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Northwoods Events</title>
<style>
  body {{ font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; margin: 2rem; }}
  table {{ border-collapse: collapse; width: 100%; max-width: 100%; }}
  th, td {{ border: 1px solid #ddd; padding: .5rem; text-align: left; }}
  th {{ background: #f6f8fa; }}
  code {{ background: #f6f8fa; padding: .1rem .3rem; border-radius: .25rem; }}
</style>
<h1>Northwoods Events</h1>
<p>Built: <code>{dt}</code></p>
<h2>Meta</h2>
<pre>{json.dumps(meta, indent=2)}</pre>
<h2>Latest sources (sample)</h2>
<table>
  <thead><tr><th>Name</th><th>Parser</th><th>Parsed</th><th>Added</th></tr></thead>
  <tbody>
    {rows or '<tr><td colspan="4"><em>No report found</em></td></tr>'}
  </tbody>
</table>
<p><a href="./state/last_run_report.json">Download last_run_report.json</a></p>
"""
open("public/index.html", "w", encoding="utf-8").write(html)
PY

      - name: Show output tree (debug)
        run: |
          echo "---- repo root ----"
          ls -lah
          echo "---- downloaded (if any) ----"
          ls -lah downloaded || true
          echo "---- public ----"
          ls -lah public || true
          echo "---- public/state ----"
          ls -lah public/state || true

      - uses: actions/configure-pages@v5

      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
