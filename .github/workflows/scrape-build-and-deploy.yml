name: Scrape, Build & Deploy

on:
  workflow_dispatch: {}
  schedule:
    - cron: "7 */3 * * *"  # every 3 hours at :07

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4

      - name: Show repo tree (pre)
        run: |
          echo "---- repo root ----"; ls -lah
          echo "---- src ----"; ls -lah src || true
          echo "---- state ----"; ls -lah state || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps + Playwright (with browsers)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install --with-deps chromium

      - name: Convert sources.yml to JSON (debug)
        run: |
          python -c "import yaml, json, io; d=yaml.safe_load(io.open('sources.yml','r',encoding='utf-8')); io.open('sources.json','w',encoding='utf-8').write(json.dumps(d,indent=2))"
          echo "Wrote sources.json"

      - name: Scrape & Parse
        env:
          USE_PLAYWRIGHT: "1"
        run: |
          set -euo pipefail
          mkdir -p state/snapshots
          PRE_MTIME="$(test -f state/last_run_report.json && stat -c %Y state/last_run_report.json || echo 0)"
          echo "PRE_MTIME=${PRE_MTIME}"
          python -c "import sys,io; import src.main as M; import yaml; M.main.__wrapped__ if hasattr(M.main,'__wrapped__') else None" || true
          # the real run (stdin = sources.yml)
          python - <<'PY' 2>/dev/null || true
# import sys,io,yaml
# from src.main import main
# sys.stdin = io.StringIO(io.open('sources.yml','r',encoding='utf-8').read())
# main()
# PY
          # If heredocs are disallowed in your repo policy, comment the block above
          # and use the one-liner below instead:
          python -c "import sys,io,yaml; from src.main import main; sys.stdin = io.StringIO(io.open('sources.yml','r',encoding='utf-8').read()); main()"
          test -s state/last_run_report.json || (echo "ERROR: state/last_run_report.json not created" && exit 1)
          POST_MTIME="$(stat -c %Y state/last_run_report.json)"
          echo "POST_MTIME=${POST_MTIME}"
          if [ "${POST_MTIME}" = "${PRE_MTIME}" ]; then
            echo "WARN: last_run_report.json timestamp unchanged. Check parser outputs."
          else
            echo "SUCCESS: last_run_report.json updated."
          fi

      - name: Quick report to logs
        run: |
          python -c "import json; d=json.load(open('state/last_run_report.json','r',encoding='utf-8')); print('Sources:',len(d.get('sources',[]))); [print('-',s.get('name',''), 'parsed:',s.get('parsed',0),'added:',s.get('added',0)) for s in d.get('sources',[])[:10]]"

      - name: Build static site (no heredocs)
        run: |
          set -euo pipefail
          mkdir -p public/state public/ics
          # Copy JSON report
          cp state/last_run_report.json public/state/last_run_report.json || echo "{}" > public/state/last_run_report.json
          # Copy ICS files if you generate them in repo root
          [ -f northwoods.ics ] && cp northwoods.ics public/ics/ || true
          [ -f northwoods-events.ics ] && cp northwoods-events.ics public/ics/ || true
          # Write a tiny index.html without heredocs
          BUILD_TIME="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          printf '%s\n' \
            '<!doctype html>' \
            '<meta charset="utf-8">' \
            '<meta name="viewport" content="width=device-width, initial-scale=1">' \
            '<title>Northwoods Events</title>' \
            '<style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:2rem}table{border-collapse:collapse;width:100%}th,td{border:1px solid #ddd;padding:.5rem;text-align:left}th{background:#f6f8fa}code{background:#f6f8fa;padding:.1rem .3rem;border-radius:.25rem}</style>' \
            '<h1>Northwoods Events</h1>' \
            "<p>Built: <code>${BUILD_TIME}</code></p>" \
            '<p><a href="./state/last_run_report.json">Download last_run_report.json</a></p>' \
            '<p><a href="./ics/">ICS files</a> (if any)</p>' \
            '<div id="summary"></div>' \
            '<script type="module">' \
            'async function main(){try{const r=await fetch("./state/last_run_report.json");const d=await r.json();const ss=(d.sources||[]).slice(0,50);const rows=ss.map(s=>`<tr><td>${s.name||""}</td><td>${s.parser_kind||""}</td><td>${s.parsed||0}</td><td>${s.added||0}</td></tr>`).join("");document.getElementById("summary").innerHTML=`<h2>Latest sources (sample)</h2><table><thead><tr><th>Name</th><th>Parser</th><th>Parsed</th><th>Added</th></tr></thead><tbody>${rows||"<tr><td colspan=4><em>No data</em></td></tr>"}</tbody></table>`}catch(e){document.getElementById("summary").textContent=String(e)}}main();' \
            '</script>' \
            > public/index.html

      - name: Show output tree
        run: |
          echo "---- public ----"; ls -lah public
          echo "---- public/state ----"; ls -lah public/state
          echo "---- public/ics ----"; ls -lah public/ics || true

      - name: Upload state as artifact (debug)
        uses: actions/upload-artifact@v4
        with:
          name: state-debug
          path: |
            state/
            public/

      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
      - id: deployment
        uses: actions/deploy-pages@v4
