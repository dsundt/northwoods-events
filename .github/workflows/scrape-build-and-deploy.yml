name: Scrape, Build & Deploy

on:
  workflow_dispatch: {}
  schedule:
    - cron: "7 */3 * * *"  # every 3 hours at :07

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      PYTHONUNBUFFERED: "1"

    steps:
      - uses: actions/checkout@v4

      - name: Show repo tree (pre)
        run: |
          echo "---- repo root ----"; ls -lah
          echo "---- src ----"; ls -lah src || true
          echo "---- state ----"; ls -lah state || true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps + Playwright (Chromium)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyyaml
          python -m playwright install --with-deps chromium

      - name: Convert sources.yml â†’ sources.json
        run: |
          python -c "import json,yaml,io; d=yaml.safe_load(io.open('sources.yml','r',encoding='utf-8')); io.open('sources.json','w',encoding='utf-8').write(json.dumps(d,indent=2))"
          test -s sources.json

      - name: Scrape & parse (robust attempts; require fresh report)
        env:
          USE_PLAYWRIGHT: "1"
        run: |
          set -euo pipefail
          mkdir -p state/snapshots

          # record pre-modification time (0 if file doesn't exist)
          PRE_MTIME="$( [ -f state/last_run_report.json ] && stat -c %Y state/last_run_report.json || echo 0 )"
          echo "PRE_MTIME=${PRE_MTIME}"

          run_and_check () {
            echo "::group::Attempt: $1"
            set +e
            bash -c "$2"
            CODE=$?
            set -e
            sleep 1
            POST_MTIME="$( [ -f state/last_run_report.json ] && stat -c %Y state/last_run_report.json || echo 0 )"
            echo "POST_MTIME=${POST_MTIME} (code ${CODE})"
            echo "::endgroup::"
            if [ "${POST_MTIME}" -gt "${PRE_MTIME}" ]; then
              echo "SUCCESS: last_run_report.json updated by: $1"
              return 0
            fi
            return 1
          }

          # Try YAML via stdin
          if run_and_check "YAML stdin" "python -u src/main.py < sources.yml"; then
            :
          # Try JSON via stdin
          elif run_and_check "JSON stdin" "python -u src/main.py < sources.json"; then
            :
          # Try plain invocation (some mains read their own file)
          elif run_and_check "plain invocation" "python -u src/main.py"; then
            :
          else
            echo "ERROR: last_run_report.json was not updated by any attempt."
            echo "If your main.py expects a *file* path or flag, wire it up here."
            exit 1
          fi

      - name: Show report snippet
        run: |
          python -c "import json; d=json.load(open('state/last_run_report.json','r',encoding='utf-8')); print('Sources:',len(d.get('sources',[]))); [print('-',s.get('name',''), 'parsed:',s.get('parsed',0),'added:',s.get('added',0)) for s in d.get('sources',[])[:10]]"

      - name: Build static site (no heredocs)
        run: |
          set -euo pipefail
          mkdir -p public/state public/ics
          cp state/last_run_report.json public/state/last_run_report.json || true
          for f in northwoods.ics northwoods-events.ics; do
            [ -f "$f" ] && cp "$f" public/ics/ || true
          done
          BUILD_TIME="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          : > public/index.html
          echo '<!doctype html>' >> public/index.html
          echo '<meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">' >> public/index.html
          echo '<title>Northwoods Events</title>' >> public/index.html
          echo '<style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:2rem}table{border-collapse:collapse;width:100%}th,td{border:1px solid #ddd;padding:.5rem;text-align:left}th{background:#f6f8fa}code{background:#f6f8fa;padding:.1rem .3rem;border-radius:.25rem}</style>' >> public/index.html
          echo '<h1>Northwoods Events</h1>' >> public/index.html
          echo "<p>Built: <code>${BUILD_TIME}</code></p>" >> public/index.html
          echo '<p><a href="./state/last_run_report.json">Download last_run_report.json</a></p>' >> public/index.html
          echo '<p><a href="./ics/">ICS files</a> (if present)</p>' >> public/index.html

      - name: Show output tree (post)
        run: |
          echo "---- public ----"; ls -lah public || true
          echo "---- public/state ----"; ls -lah public/state || true
          echo "---- public/ics ----"; ls -lah public/ics || true

      # Upload state for debugging (handy if something fails upstream)
      - name: Upload state/ as artifact
        uses: actions/upload-artifact@v4
        with:
          name: state-debug
          path: |
            state
          if-no-files-found: ignore
          retention-days: 3

      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
      - id: deployment
        uses: actions/deploy-pages@v4
