name: Scrape, Build & Deploy

on:
  workflow_dispatch: {}
  schedule:
    - cron: "7 */3 * * *"  # every 3 hours at :07

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps (+ Playwright browser)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install --with-deps chromium

      # OPTIONAL: if you have an ics build script, it can run after scraping; kept conditional
      # - name: Build ICS files (if script exists)
      #   run: |
      #     if [ -f src/build_ics.py ]; then python src/build_ics.py; fi

      - name: Scrape & parse events
        env:
          USE_PLAYWRIGHT: "1"  # let your parser know to use Playwright where needed
        run: |
          set -euo pipefail
          mkdir -p state/snapshots
          # IMPORTANT: your main.py reads sources from stdin
          python src/main.py < sources.yml
          test -s state/last_run_report.json || (echo "ERROR: state/last_run_report.json not created" && exit 1)

      - name: Build static site
        run: |
          set -euo pipefail
          mkdir -p public/state public/ics
          # Copy last_run_report.json (required)
          if [ -f state/last_run_report.json ]; then
            cp state/last_run_report.json public/state/last_run_report.json
          elif [ -f last_run_report.json ]; then
            cp last_run_report.json public/state/last_run_report.json
          else
            echo '{}' > public/state/last_run_report.json
          fi
          # Copy any ICS files if present
          for f in northwoods.ics northwoods-events.ics; do
            [ -f "$f" ] && cp "$f" public/ics/ || true
          done
          # Generate a tiny index.html via Python (robust to YAML quoting issues)
          python - <<'PY'
import json, os, datetime
os.makedirs("public", exist_ok=True)
report_path = "public/state/last_run_report.json"
dt = datetime.datetime.utcnow().isoformat()+"Z"
try:
    data = json.load(open(report_path, "r", encoding="utf-8"))
except Exception as e:
    data = {"error": str(e)}
sources = (data.get("sources") or [])[:50]
rows = "\n".join(
    f"<tr><td>{s.get('name','')}</td><td>{s.get('parser_kind','')}</td><td>{s.get('parsed',0)}</td><td>{s.get('added',0)}</td></tr>"
    for s in sources
)
html = f"""<!doctype html>
<meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">
<title>Northwoods Events</title>
<style>
  body {{ font-family: system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif; margin:2rem; }}
  table {{ border-collapse: collapse; width: 100%; }}
  th, td {{ border: 1px solid #ddd; padding: .5rem; text-align:left; }}
  th {{ background: #f6f8fa; }}
  code {{ background:#f6f8fa; padding:.1rem .3rem; border-radius:.25rem; }}
</style>
<h1>Northwoods Events</h1>
<p>Built: <code>{dt}</code></p>
<p><a href="./state/last_run_report.json">Download last_run_report.json</a></p>
<p><a href="./ics/">ICS files</a> (if present)</p>
<h2>Latest sources (sample)</h2>
<table>
  <thead><tr><th>Name</th><th>Parser</th><th>Parsed</th><th>Added</th></tr></thead>
  <tbody>{rows or '<tr><td colspan="4"><em>No data</em></td></tr>'}</tbody>
</table>
"""
open("public/index.html", "w", encoding="utf-8").write(html)
PY

      - name: Show output tree (debug)
        run: |
          echo "---- public ----"; ls -lah public || true
          echo "---- public/state ----"; ls -lah public/state || true
          echo "---- public/ics ----"; ls -lah public/ics || true

      - uses: actions/configure-pages@v5

      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

      - id: deployment
        uses: actions/deploy-pages@v4
