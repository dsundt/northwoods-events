name: test-parser

on:
  workflow_dispatch:
    inputs:
      parser_kind:
        description: "Parser to use"
        type: choice
        required: true
        default: modern_tribe
        options: [modern_tribe, ai1ec, growthzone, ics, simpleview, squarespace]
      snapshot_pattern:
        description: "Glob for snapshots to list/test"
        type: string
        required: true
        default: "state/snapshots/*.html"
      max_files:
        description: "Max files to list/test (string; will be cast to int)"
        type: string
        required: true
        default: "15"
      run_mode:
        description: "What to do after listing"
        type: choice
        required: true
        default: list
        options: [list, single, matrix]
      index:
        description: "1-based index to parse when run_mode=single (string)"
        type: string
        required: true
        default: "1"

jobs:
  prep:
    name: Gather snapshot files
    runs-on: ubuntu-latest
    outputs:
      files_json: ${{ steps.setlist.outputs.files_json }}
      count: ${{ steps.setlist.outputs.count }}
      chosen_path: ${{ steps.pick.outputs.chosen_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo root and snapshots dir
        shell: bash
        run: |
          echo "Repo root: $(pwd)"
          echo "Top-level:"; ls -la
          if [ -d state/snapshots ]; then
            echo "Snapshots dir (first 200 entries):"
            ls -la state/snapshots | sed -n '1,200p'
          else
            echo "Directory state/snapshots does not exist."
          fi

      - name: Collect matching files (safe outputs)
        id: setlist
        shell: bash
        env:
          PATTERN: ${{ inputs.snapshot_pattern }}
          LIMIT: ${{ inputs.max_files }}
        run: |
          set -euo pipefail
          echo "Pattern: ${PATTERN}"
          echo "Limit: ${LIMIT}"
          matches=$(python -c 'import glob,os,json,sys; p=os.environ.get("PATTERN","state/snapshots/*.html"); L=int(os.environ.get("LIMIT","15")); m=sorted([x for x in glob.glob(p) if os.path.isfile(x)])[:L]; print(json.dumps(m,separators=(",",":")))')
          echo "Matched: ${matches}"
          echo "files_json=${matches}" >> "$GITHUB_OUTPUT"
          echo "count=$(python - <<'PY'\nimport json,os;print(len(json.loads(os.environ["matches"])))\nPY\n)" >> "$GITHUB_OUTPUT"

      - name: Stop after listing (when run_mode=list)
        if: ${{ inputs.run_mode == 'list' }}
        run: |
          echo "Run mode is 'list' â€” not parsing anything."
