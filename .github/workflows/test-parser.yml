name: test-parser

on:
  workflow_dispatch:
    inputs:
      parser_kind:
        description: "Parser to use"
        type: choice
        required: true
        default: modern_tribe
        options:
          - modern_tribe
          - ai1ec
          - growthzone
          - ics
      snapshot_pattern:
        description: "Glob for snapshots to list/test"
        type: string
        required: true
        default: "state/snapshots/*.html"
      max_files:
        description: "Max files to list/test (string; will be cast to int)"
        type: string
        required: true
        default: "15"
      run_mode:
        description: "What to do after listing"
        type: choice
        required: true
        default: list
        options:
          - list      # only list files (no parsing)
          - single    # parse just one by index
          - matrix    # parse first N as a matrix
      index:
        description: "1-based index to parse when run_mode=single (string)"
        type: string
        required: true
        default: "1"

jobs:
  gather:
    name: Gather snapshot files
    runs-on: ubuntu-latest
    outputs:
      files_json: ${{ steps.collect.outputs.files_json }}
      count: ${{ steps.collect.outputs.count }}
      chosen_path: ${{ steps.pick.outputs.chosen_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List directory (for debug)
        run: |
          echo "Repo root: $(pwd)"
          echo
          echo "Top-level:"
          ls -la
          echo
          if [ -d state/snapshots ]; then
            echo "Snapshots dir:"
            ls -la state/snapshots | sed -n '1,200p'
          else
            echo "state/snapshots/ (missing)"
          fi

      - name: Collect matching files
        id: collect
        shell: bash
        env:
          PATTERN: ${{ inputs.snapshot_pattern }}
          LIMIT: ${{ inputs.max_files }}
        run: |
          set -euo pipefail
          echo "Searching with pattern: ${PATTERN}"
          python - << 'PY'
import json, glob, os, sys
pattern = os.environ.get("PATTERN","state/snapshots/*.html")
try:
    limit = int(os.environ.get("LIMIT","15"))
except:
    limit = 15
matches = sorted(glob.glob(pattern))
matches = [m for m in matches if os.path.isfile(m)]
limited = matches[:limit]
print("\n=== Matched files (limited to %d) ===" % limit)
if not limited:
    print("  (no matches)")
else:
    for i, p in enumerate(limited, 1):
        print(f"  {i:>3}. {p}")
print("\nFound:", len(limited))
payload = json.dumps(limited)  # always valid JSON (maybe "[]")
# Write step outputs safely with heredoc
out = os.environ.get("GITHUB_OUTPUT", "/dev/stdout")
with open(out, "a") as fh:
    fh.write("files_json<<JSON\n")
    fh.write(payload + "\n")
    fh.write("JSON\n")
    fh.write(f"count={len(limited)}\n")
PY

      - name: Pick single file (when run_mode=single)
        id: pick
        if: ${{ inputs.run_mode == 'single' }}
        shell: bash
        env:
          FILES: ${{ steps.collect.outputs.files_json }}
          INDEX: ${{ inputs.index }}
        run: |
          set -euo pipefail
          python - << 'PY'
import json, os, sys
files_json = os.environ.get("FILES","[]")
try:
    files = json.loads(files_json)
except Exception as e:
    print("❌ Could not decode files_json:", e)
    files = []
try:
    idx = int(os.environ.get("INDEX","1"))
except:
    idx = 1
chosen = ""
if not files:
    print("❌ No files matched the pattern.")
elif idx < 1 or idx > len(files):
    print(f"❌ Index {idx} is out of range 1..{len(files)}")
else:
    chosen = files[idx-1]
    print(f"Chosen file #{idx}: {chosen}")
out = os.environ.get("GITHUB_OUTPUT","/dev/stdout")
with open(out, "a") as fh:
    fh.write(f"chosen_path={chosen}\n")
if not chosen:
    sys.exit(1)
PY

      - name: Stop after listing (when run_mode=list)
        if: ${{ inputs.run_mode == 'list' }}
        run: |
          echo "Run mode is 'list' — not parsing anything. Re-run with run_mode=single or matrix."
          exit 0

  run-single:
    name: Parse one snapshot
    runs-on: ubuntu-latest
    needs: gather
    if: ${{ inputs.run_mode == 'single' && needs.gather.outputs.chosen_path != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests beautifulsoup4 lxml ics python-dateutil pytz
          fi

      - name: Show chosen file
        run: echo "Parsing: ${{ needs.gather.outputs.chosen_path }} with parser ${{ inputs.parser_kind }}"

      - name: Run parser
        run: |
          python src/test_parser.py "${{ needs.gather.outputs.chosen_path }}" "${{ inputs.parser_kind }}"

  run-matrix:
    name: Parse N snapshots (matrix)
    runs-on: ubuntu-latest
    needs: gather
    if: ${{ inputs.run_mode == 'matrix' && needs.gather.outputs.count != '0' }}
    strategy:
      fail-fast: false
      matrix:
        file: ${{ fromJSON(needs.gather.outputs.files_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests beautifulsoup4 lxml ics python-dateutil pytz
          fi

      - name: Show file
        run: echo "Parsing: ${{ matrix.file }} with parser ${{ inputs.parser_kind }}"

      - name: Run parser
        run: |
          python src/test_parser.py "${{ matrix.file }}" "${{ inputs.parser_kind }}"
